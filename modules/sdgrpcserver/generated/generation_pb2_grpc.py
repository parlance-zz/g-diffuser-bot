# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generation_pb2 as generation__pb2


class GenerationServiceStub(object):
    """
    gRPC services

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Generate = channel.unary_stream(
                '/gooseai.GenerationService/Generate',
                request_serializer=generation__pb2.Request.SerializeToString,
                response_deserializer=generation__pb2.Answer.FromString,
                )
        self.ChainGenerate = channel.unary_stream(
                '/gooseai.GenerationService/ChainGenerate',
                request_serializer=generation__pb2.ChainRequest.SerializeToString,
                response_deserializer=generation__pb2.Answer.FromString,
                )
        self.AsyncGenerate = channel.unary_unary(
                '/gooseai.GenerationService/AsyncGenerate',
                request_serializer=generation__pb2.Request.SerializeToString,
                response_deserializer=generation__pb2.AsyncHandle.FromString,
                )
        self.AsyncResult = channel.unary_unary(
                '/gooseai.GenerationService/AsyncResult',
                request_serializer=generation__pb2.AsyncHandle.SerializeToString,
                response_deserializer=generation__pb2.AsyncAnswer.FromString,
                )
        self.AsyncCancel = channel.unary_unary(
                '/gooseai.GenerationService/AsyncCancel',
                request_serializer=generation__pb2.AsyncHandle.SerializeToString,
                response_deserializer=generation__pb2.AsyncCancelAnswer.FromString,
                )


class GenerationServiceServicer(object):
    """
    gRPC services

    """

    def Generate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChainGenerate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AsyncGenerate(self, request, context):
        """AsyncGenerate starts an asynchronous generation

        The passed Request is the same as to Generate. However this method
        will return immediately, returning a handle that can be used to get
        any results of the generation created so far or cancel it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AsyncResult(self, request, context):
        """AsyncResult gets and results so far for an asynchronous generation

        You can call this multiple times. Each time you call it, you will get
        any results that are ready that have not been returned before.
        (Note that this "consumes" the ready results - they will not be returned again).

        Any generated results will eventually (default: after 10 minutes) be discarded
        if they are not taken by a call to this method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AsyncCancel(self, request, context):
        """AsyncCancel cancels a generation that is currently in progress
        and discards any results that have not yet been returned by a call to AsyncResult.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenerationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Generate': grpc.unary_stream_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=generation__pb2.Request.FromString,
                    response_serializer=generation__pb2.Answer.SerializeToString,
            ),
            'ChainGenerate': grpc.unary_stream_rpc_method_handler(
                    servicer.ChainGenerate,
                    request_deserializer=generation__pb2.ChainRequest.FromString,
                    response_serializer=generation__pb2.Answer.SerializeToString,
            ),
            'AsyncGenerate': grpc.unary_unary_rpc_method_handler(
                    servicer.AsyncGenerate,
                    request_deserializer=generation__pb2.Request.FromString,
                    response_serializer=generation__pb2.AsyncHandle.SerializeToString,
            ),
            'AsyncResult': grpc.unary_unary_rpc_method_handler(
                    servicer.AsyncResult,
                    request_deserializer=generation__pb2.AsyncHandle.FromString,
                    response_serializer=generation__pb2.AsyncAnswer.SerializeToString,
            ),
            'AsyncCancel': grpc.unary_unary_rpc_method_handler(
                    servicer.AsyncCancel,
                    request_deserializer=generation__pb2.AsyncHandle.FromString,
                    response_serializer=generation__pb2.AsyncCancelAnswer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gooseai.GenerationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenerationService(object):
    """
    gRPC services

    """

    @staticmethod
    def Generate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gooseai.GenerationService/Generate',
            generation__pb2.Request.SerializeToString,
            generation__pb2.Answer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChainGenerate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gooseai.GenerationService/ChainGenerate',
            generation__pb2.ChainRequest.SerializeToString,
            generation__pb2.Answer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AsyncGenerate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.GenerationService/AsyncGenerate',
            generation__pb2.Request.SerializeToString,
            generation__pb2.AsyncHandle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AsyncResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.GenerationService/AsyncResult',
            generation__pb2.AsyncHandle.SerializeToString,
            generation__pb2.AsyncAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AsyncCancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gooseai.GenerationService/AsyncCancel',
            generation__pb2.AsyncHandle.SerializeToString,
            generation__pb2.AsyncCancelAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
