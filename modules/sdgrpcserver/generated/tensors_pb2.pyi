"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Dtype:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DtypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Dtype.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DT_INVALID: _Dtype.ValueType  # 0
    DT_FLOAT32: _Dtype.ValueType  # 1
    DT_FLOAT64: _Dtype.ValueType  # 2
    DT_FLOAT16: _Dtype.ValueType  # 3
    DT_BFLOAT16: _Dtype.ValueType  # 4
    DT_COMPLEX32: _Dtype.ValueType  # 5
    DT_COMPLEX64: _Dtype.ValueType  # 6
    DT_COMPLEX128: _Dtype.ValueType  # 7
    DT_UINT8: _Dtype.ValueType  # 8
    DT_INT8: _Dtype.ValueType  # 9
    DT_INT16: _Dtype.ValueType  # 10
    DT_INT32: _Dtype.ValueType  # 11
    DT_INT64: _Dtype.ValueType  # 12
    DT_BOOL: _Dtype.ValueType  # 13
    DT_QUINT8: _Dtype.ValueType  # 14
    DT_QINT8: _Dtype.ValueType  # 15
    DT_QINT32: _Dtype.ValueType  # 16
    DT_QUINT4_2: _Dtype.ValueType  # 17

class Dtype(_Dtype, metaclass=_DtypeEnumTypeWrapper): ...

DT_INVALID: Dtype.ValueType  # 0
DT_FLOAT32: Dtype.ValueType  # 1
DT_FLOAT64: Dtype.ValueType  # 2
DT_FLOAT16: Dtype.ValueType  # 3
DT_BFLOAT16: Dtype.ValueType  # 4
DT_COMPLEX32: Dtype.ValueType  # 5
DT_COMPLEX64: Dtype.ValueType  # 6
DT_COMPLEX128: Dtype.ValueType  # 7
DT_UINT8: Dtype.ValueType  # 8
DT_INT8: Dtype.ValueType  # 9
DT_INT16: Dtype.ValueType  # 10
DT_INT32: Dtype.ValueType  # 11
DT_INT64: Dtype.ValueType  # 12
DT_BOOL: Dtype.ValueType  # 13
DT_QUINT8: Dtype.ValueType  # 14
DT_QINT8: Dtype.ValueType  # 15
DT_QINT32: Dtype.ValueType  # 16
DT_QUINT4_2: Dtype.ValueType  # 17
global___Dtype = Dtype

class _AttributeType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _AttributeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AttributeType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    AT_PARAMETER: _AttributeType.ValueType  # 0
    AT_BUFFER: _AttributeType.ValueType  # 1

class AttributeType(_AttributeType, metaclass=_AttributeTypeEnumTypeWrapper): ...

AT_PARAMETER: AttributeType.ValueType  # 0
AT_BUFFER: AttributeType.ValueType  # 1
global___AttributeType = AttributeType

@typing_extensions.final
class Tensor(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DTYPE_FIELD_NUMBER: builtins.int
    SHAPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    ATTR_TYPE_FIELD_NUMBER: builtins.int
    dtype: global___Dtype.ValueType
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    data: builtins.bytes
    attr_type: global___AttributeType.ValueType
    def __init__(
        self,
        *,
        dtype: global___Dtype.ValueType = ...,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
        data: builtins.bytes = ...,
        attr_type: global___AttributeType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_attr_type", b"_attr_type", "attr_type", b"attr_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_attr_type", b"_attr_type", "attr_type", b"attr_type", "data", b"data", "dtype", b"dtype", "shape", b"shape"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_attr_type", b"_attr_type"]) -> typing_extensions.Literal["attr_type"] | None: ...

global___Tensor = Tensor

@typing_extensions.final
class Attribute(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    MODULE_FIELD_NUMBER: builtins.int
    TENSOR_FIELD_NUMBER: builtins.int
    STRING_FIELD_NUMBER: builtins.int
    INT64_FIELD_NUMBER: builtins.int
    FLOAT_FIELD_NUMBER: builtins.int
    BOOL_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def module(self) -> global___Module: ...
    @property
    def tensor(self) -> global___Tensor: ...
    string: builtins.str
    int64: builtins.int
    float: builtins.float
    bool: builtins.bool
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        module: global___Module | None = ...,
        tensor: global___Tensor | None = ...,
        string: builtins.str = ...,
        int64: builtins.int = ...,
        float: builtins.float = ...,
        bool: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool", b"bool", "float", b"float", "int64", b"int64", "module", b"module", "string", b"string", "tensor", b"tensor", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool", b"bool", "float", b"float", "int64", b"int64", "module", b"module", "name", b"name", "string", b"string", "tensor", b"tensor", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value", b"value"]) -> typing_extensions.Literal["module", "tensor", "string", "int64", "float", "bool"] | None: ...

global___Attribute = Attribute

@typing_extensions.final
class Module(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    NAMES_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Attribute]: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        names: collections.abc.Iterable[builtins.str] | None = ...,
        attributes: collections.abc.Iterable[global___Attribute] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["attributes", b"attributes", "name", b"name", "names", b"names"]) -> None: ...

global___Module = Module
